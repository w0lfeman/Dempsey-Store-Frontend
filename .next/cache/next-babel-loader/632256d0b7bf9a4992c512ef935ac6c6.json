{"ast":null,"code":"var _jsxFileName = \"/Users/davidmacbook/Code/Advanced-React/sick-fits/frontend/Dempsey-Store-Frontend/components/Search.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id\n    }\n  });\n}\n\nclass AutoComplete extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"onChange\", debounce(async (e, client) => {\n      console.log('Searching...'); // turn loading on\n\n      this.setState({\n        loading: true\n      }); // Manually query apollo client\n\n      const res = await client.query({\n        query: SEARCH_ITEMS_QUERY,\n        variables: {\n          searchTerm: e.target.value\n        }\n      });\n      this.setState({\n        items: res.data.items,\n        loading: false\n      });\n    }, 350));\n  }\n\n  render() {\n    resetIdCounter();\n    return __jsx(SearchStyles, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, __jsx(Downshift, {\n      onChange: routeToItem,\n      itemToString: item => item === null ? '' : item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, ({\n      getInputProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      highlightedIndex\n    }) => __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, __jsx(ApolloConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, client => __jsx(\"input\", _extends({}, getInputProps({\n      type: 'search',\n      placeholder: 'Search For An Item',\n      id: 'search',\n      className: this.state.loading ? 'loading' : '',\n      onChange: e => {\n        e.persist();\n        this.onChange(e, client);\n      }\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }))), isOpen && __jsx(DropDown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, this.state.items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n      item\n    }), {\n      key: item.id,\n      highlighted: index === highlightedIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }), __jsx(\"img\", {\n      width: \"50\",\n      src: item.image,\n      alt: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }\n    }), item.title)), !this.state.items.length && !this.state.loading && __jsx(DropDownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 44\n      }\n    }, \" Nothing Found \", inputValue)))));\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/davidmacbook/Code/Advanced-React/sick-fits/frontend/Dempsey-Store-Frontend/components/Search.js"],"names":["React","Downshift","resetIdCounter","Router","ApolloConsumer","gql","debounce","DropDown","DropDownItem","SearchStyles","SEARCH_ITEMS_QUERY","routeToItem","item","push","pathname","query","id","AutoComplete","Component","items","loading","e","client","console","log","setState","res","variables","searchTerm","target","value","data","render","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","state","onChange","persist","map","index","image","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Downshift, { resetIdCounter } from 'downshift';\nimport Router from 'next/router';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nfunction routeToItem(item) {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id,\n    },\n  });\n}\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false,\n  };\n  onChange = debounce(async (e, client) => {\n    console.log('Searching...');\n    // turn loading on\n    this.setState({ loading: true });\n    // Manually query apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value },\n    });\n    this.setState({\n      items: res.data.items,\n      loading: false,\n    });\n  }, 350);\n  render() {\n    resetIdCounter();\n    return (\n      <SearchStyles>\n        <Downshift onChange={routeToItem} itemToString={item => (item === null ? '' : item.title)}>\n          {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (\n            <div>\n              <ApolloConsumer>\n                {client => (\n                  <input\n                    {...getInputProps({\n                      type: 'search',\n                      placeholder: 'Search For An Item',\n                      id: 'search',\n                      className: this.state.loading ? 'loading' : '',\n                      onChange: e => {\n                        e.persist();\n                        this.onChange(e, client);\n                      },\n                    })}\n                  />\n                )}\n              </ApolloConsumer>\n              {isOpen && (\n                <DropDown>\n                  {this.state.items.map((item, index) => (\n                    <DropDownItem\n                      {...getItemProps({ item })}\n                      key={item.id}\n                      highlighted={index === highlightedIndex}\n                    >\n                      <img width=\"50\" src={item.image} alt={item.title} />\n                      {item.title}\n                    </DropDownItem>\n                  ))}\n                  {!this.state.items.length &&\n                    !this.state.loading && <DropDownItem> Nothing Found {inputValue}</DropDownItem>}\n                </DropDown>\n              )}\n            </div>\n          )}\n        </Downshift>\n      </SearchStyles>\n    );\n  }\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}